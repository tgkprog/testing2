<?xml version="1.0" encoding="UTF-8"?>

<!-- - Application context definition for Data Module business layer. - Contains 
	bean references to the transaction manager and to the DAOs in - dataAccessContext-local.xml -->
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="
			http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
			http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-2.5.xsd
			http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-2.5.xsd">


	<!-- ========================= GENERAL DEFINITIONS ========================= -->

	<!-- Configurer that replaces ${...} placeholders with values from properties 
		files -->
	<!-- (in this case, mail and JDBC related properties) -->
	<bean id="propertyConfigurer"
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<list>
				<value>./main.properties</value>
			</list>
		</property>
	</bean>

	<!-- ========================= BUSINESS OBJECT DEFINITIONS ======================== -->

	<!-- Dat module primary business object: default implementation, Note that 
		this is just a POJO definition in this file: there's no need to use a TransactionFactoryProxyBean 
		if the class has source-level transaction annotations; the "tx:annotation-driven" 
		marker will apply transaction advice automatically. -->
	<bean id="mainService" class="org.s2n.ddt.service.impl.MainServiceImpl">
		<property name="actionsDao" ref="actionsDao" />
		<property name="agentDetailsDao" ref="agentDetailsDao" />
		<property name="applicationDao" ref="applicationDao" />
		<property name="conditionGroupDao" ref="conditionGroupDao" />
		<property name="conditionsDao" ref="conditionsDao" />
		<property name="featureDao" ref="featureDao" />
		<property name="functionalDao" ref="functionalDao" />
		<property name="runnerDao" ref="runnerDao" />
		<property name="screenDao" ref="screenDao" />
		<property name="suiteScenarioMappingDao" ref="suiteScenarioMappingDao" />
		<property name="testPlanScenarioMapDao" ref="testPlanScenarioMapDao" />
		<property name="testSuiteDao" ref="testSuiteDao" />
	</bean>

	<bean id="inputService" class="org.s2n.ddt.service.impl.InputServiceImpl">
		<property name="identifierTypeDao" ref="identifierTypeDao" />
		<property name="objectGroupDao" ref="objectGroupDao" />
		<property name="objectsDao" ref="objectsDao" />
		<property name="objectTypeDao" ref="objectTypeDao" />
		<property name="paramDao" ref="paramDao" />
		<property name="paramGroupDao" ref="paramGroupDao" />
		<property name="testCaseDao" ref="testCaseDao" />
		<property name="testCondDataDao" ref="testCondDataDao" />
		<property name="testParamDataDao" ref="testParamDataDao" />
		<property name="testStepDao" ref="testStepDao" />
		<property name="testPlanScenarioMapDao" ref="testPlanScenarioMapDao" />
		<property name="testSuiteDao" ref="testSuiteDao" />
		<property name="testScenarioDao" ref="testScenarioDao" />
		<property name="runnerDao" ref="runnerDao" />
		<property name="actionsDao" ref="actionsDao" />
		<property name="applicationDao" ref="applicationDao" />
		<property name="screenDao" ref="screenDao" />
		<property name="functionalDao" ref="functionalDao" />
		<property name="featureDao" ref="featureDao" />
		<property name="stepParamGroupMappingDao" ref="stepParamGroupMappingDao" />
		<property name="testPlanDao" ref="testPlanDao" />
		<property name="testScenarioParamDataDao" ref="testScenarioParamDataDao" />
		<property name="suiteScenarioMappingDao" ref="suiteScenarioMappingDao" />
	</bean>

	<bean id="outputService" class="org.s2n.ddt.service.impl.OutputServiceImpl">
		<property name="testPlanDao" ref="testPlanDao" />
		<property name="testReportDao" ref="testReportDao" />
		<property name="testRunDataDao" ref="testRunDataDao" />
		<property name="testRunDetailsDao" ref="testRunDetailsDao" />
		<property name="testScenarioDao" ref="testScenarioDao" />
		<property name="testScenarioParamDataDao" ref="testScenarioParamDataDao" />
	</bean>

	<bean id="readObjectTypeUtils" class="org.s2n.ddt.excelreader.ReadObjectTypesData">
		<property name="inputService" ref="inputService" />
	</bean>

	<bean id="readObjectsData" class="org.s2n.ddt.excelreader.ReadObjectsData">
	</bean>
	<!-- ========================= ASPECT CONFIGURATION ======================== -->

	<!-- This marker creates the full auto-proxy infrastructure that is necessary 
		for applying Spring's Transactional annotation (as contained in the PetStoreAnnotationImpl 
		class). By default, it will refer to the transaction manager bean named "transactionManager". -->
	<!-- <tx:annotation-driven transaction-manager="transactionManager" />

	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>

	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="select*" read-only="true" />
			<tx:method name="*" />
		</tx:attributes>
	</tx:advice>

	<aop:config>
		<aop:pointcut id="inputServiceMethods"
			expression="execution(* org.s2n.ddt.service.*.*(*))" />
		<aop:advisor advice-ref="txAdvice" pointcut-ref="inputServiceMethods" />
	</aop:config> -->

</beans>
